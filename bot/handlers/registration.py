from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from bot.states.user_registration import RegistrationStates
from bot.services.django_api import DjangoAPI
import re

router = Router()
django_api = DjangoAPI()

# –°–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
BAD_WORDS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    '—Ö—É–π','–ø–∏–¥–æ—Ä–∞—Å', '–ø–∏–¥–æ—Ä', '—Ö—É—ë', '—Ö—É—è', '—Ö—É—é', '—Ö—É–µ',
    '–ø–∏–∑–¥', '–ø–∏–∑–¥',
    '–µ–±–∞–Ω', '–µ–±–∞—Ç—å', '–µ–±–ª–∏', '–µ–±–∞–ª', '–µ–±–∞—à', '–µ–±–∏—Å',
    '—ë–±–∞–Ω', '—ë–±–∞—Ç—å', '—ë–±–ª–∏', '—ë–±–∞–ª', '—ë–±–∞—à', '—ë–±–∏—Å',
    '–º—É–¥–∞–∫', '–º—É–¥–∏–ª', '–º—É–¥–æ–∑–≤–æ–Ω',
    '–≥–∞–Ω–¥–æ–Ω', '–≥–æ–Ω–¥–æ–Ω',
    '–±–ª—è–¥—å', '–±–ª—è–¥', '–±–ª—è',
    '—Å—É–∫–∞', '—Å—É–∫–∏', '—Å—É—á–∫',
    '–≥–æ–Ω–¥–æ–Ω',
    '—à–ª—é—Ö–∞', '—à–ª—é—Ö',
    '–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞', '–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫',
    '–ø–µ–¥–∏–∫', '–ø–∏–¥–æ—Ä', '–ø–∏–¥–æ—Ä–∞—Å', '–ø–∏–¥–∞—Ä–∞—Å', '–ø–∏–¥—Ä',
    '–≥–æ–º–∏–∫',

    # –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
    '–æ—Ö—É–µ–Ω', '–æ—Ö—É–∏—Ç', '–æ—Ö—É–µ',
    '–ø–æ—Ö—É–π', '–ø–æ—Ö—É—é',
    '—Ä–∞–∑—ä–µ–±', '—Ä–∞–∑—ä—ë–±',
    '—É–µ–±–∞–Ω', '—É—ë–±–∞–Ω',
    '–∑–∞–µ–±', '–∑–∞—ë–±',
    '—Å—ä–µ–±', '—Å—ä—ë–±',
    '–≤—ã–µ–±', '–≤—ã–µ–±–∞–Ω',

    # –ú–µ–Ω–µ–µ –≥—Ä—É–±—ã–µ, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ
    '–¥–æ–ª–±–æ—ë–±', '–¥–æ–ª–±–æ–µ–±',
    '–∫–æ–Ω—á–∞', '–∫–æ–Ω—á',
    '–º—Ä–∞–∑—å', '–º—Ä–∞–∑–∏',
    '—É–±–ª—é–¥–æ–∫', '—É–±–ª—é–¥–∫',
    '–≤—ã–±–ª—è–¥–æ–∫', '–≤—ã–±–ª—è–¥–∫',
    '—Å–≤–æ–ª–æ—á', '—Å–≤–æ–ª–æ—á—å',
    '—Ç–≤–∞—Ä—å', '—Ç–≤–∞—Ä–∏',
    '–ø–∞–¥–ª–∞', '–ø–∞–¥–ª',
    '–≥–Ω–∏–ª', '–≥–Ω–∏–¥',
    '—á–µ—Ä—Ç', '—á—ë—Ä—Ç', '—á–æ—Ä—Ç',

    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–∞—Ç—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    'fuck', 'fucking', 'fucker',
    'shit', 'shitting', 'bullshit',
    'asshole', 'dick', 'cock', 'pussy', 'cunt',
    'bitch', 'bastard', 'whore', 'slut',
    'damn', 'god damn',
    'motherfucker', 'motherfucking',

    # –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –ø–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏/–ø—Ä–∏–∑–Ω–∞–∫–∞–º
    '–∂–∏–¥', '–∂–∏–¥–æ–≤',
    '—á—É—Ä–∫', '—Ö–∞—á', '—á–µ—Ä–Ω–æ–∂–æ–ø', '—É–∑–∫–æ–≥–ª–∞–∑',
    '–¥–∞—É–Ω', '–¥–µ–±–∏–ª', '–∏–¥–∏–æ—Ç', '–∫—Ä–µ—Ç–∏–Ω', '—É–º—Å—Ç–≤–µ–Ω–Ω–æ–æ—Ç—Å—Ç–∞–ª',

    # –î—Ä—É–≥–∏–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
    '–¥–µ–≥–µ–Ω–µ—Ä–∞—Ç', '–¥–µ–±–∏–ª', '–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫', '–æ–ª–µ–Ω—å', '–∫–æ–∑–µ–ª',
    '–ø—Ä–∏–¥—É—Ä–æ–∫', '—Ç—É–ø–∏—Ü', '–æ–ª—É—Ö', '–±–æ–ª–≤–∞–Ω',
]

def contains_bad_words(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤"""
    text_lower = text.lower()
    return any(bad_word in text_lower for bad_word in BAD_WORDS)


def is_valid_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏"""
    # –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
    if len(name) < 2 or len(name) > 50:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç
    if contains_bad_words(name):
        return False

    return True


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django
    user_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "language_code": message.from_user.language_code,
        "is_bot": False
    }

    await django_api.create_user(user_data)

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    keyboard = [
        [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")],
        [types.KeyboardButton(text="üá∫üá∏ English")]
    ]
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! / Welcome!\n\n"
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=reply_markup
    )

    await state.set_state(RegistrationStates.choosing_language)


@router.message(RegistrationStates.choosing_language, F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English"]))
async def language_chosen(message: types.Message, state: FSMContext):
    language = "ru" if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else "en"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(language=language)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_keyboard = types.ReplyKeyboardRemove()

    if language == "ru":
        text = "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üòä\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    else:
        text = "Great! Let's get acquainted üòä\n\nWhat's your name?"

    await message.answer(text, reply_markup=remove_keyboard)
    await state.set_state(RegistrationStates.entering_name)


@router.message(RegistrationStates.choosing_language)
async def wrong_language_choice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
        "‚ùå Please choose a language from the options provided."
    )


@router.message(RegistrationStates.entering_name)
async def name_entered(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_data = await state.get_data()
    language = user_data.get('language', 'ru')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
    if not is_valid_name(name):
        if language == "ru":
            await message.answer(
                "‚ùå –≠—Ç–æ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã\n"
                "‚Ä¢ –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ë–µ–∑ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤"
            )
        else:
            await message.answer(
                "‚ùå This name is invalid. Please enter a real name:\n"
                "‚Ä¢ Letters only\n"
                "‚Ä¢ 2-50 characters\n"
                "‚Ä¢ No offensive words"
            )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_name=name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Django
    await django_api.create_user_action(
        telegram_user_id=message.from_user.id,
        action_type="registration_complete",
        action_data={"name": name, "language": language}
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if language == "ru":
        text = f"""
‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–º–æ—â—å
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
        """
    else:
        text = f"""
‚úÖ Great, {name}! Nice to meet you!

Registration completed! You can now use the bot.

Available commands:
/help - Help
/profile - Your profile
        """

    await message.answer(text)
    await state.clear()


@router.message(RegistrationStates.entering_name)
async def invalid_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (–∑–∞–ø–∞—Å–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä)"""
    user_data = await state.get_data()
    language = user_data.get('language', 'ru')

    if language == "ru":
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    else:
        await message.answer("‚ùå Please enter a valid name.")