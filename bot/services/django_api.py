import aiohttp
import asyncio
import json


class DjangoAPI:
    def __init__(self, base_url: str = "http://localhost:8000/api"):
        self.base_url = base_url

    async def create_user(self, user_data: dict):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/users/"

        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=user_data) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")

                    response_text = await response.text()
                    print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_text}")

                    if response.status == 201:
                        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                        return await response.json()
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")
                        return None
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None

    async def get_user_by_telegram_id(self, telegram_user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram user_id"""
        url = f"{self.base_url}/users/by_telegram_id/?user_id={telegram_user_id}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_data['id']}, user_id={user_data['user_id']}")
                        return user_data
                    else:
                        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return None
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    async def create_user_action(self, telegram_user_id: int, action_type: str, action_data: dict = None):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = await self.get_user_by_telegram_id(telegram_user_id)

        if not user:
            print(f"‚ùå –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        url = f"{self.base_url}/actions/"

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'id' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ForeignKey
        corrected_data = {
            "user": user["id"],  # ‚Üê –í–ê–ñ–ù–û: —ç—Ç–æ ID –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ TelegramUser (3), –∞ –Ω–µ user_id
            "action_type": action_type,
            "data": action_data or {}
        }

        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫: {url}")
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {corrected_data}")
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã: {user['id']} (telegram user_id: {user['user_id']})")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=corrected_data) as response:
                    response_text = await response.text()
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: {response.status}")
                    print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: {response_text}")

                    if response.status == 201:
                        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                        return await response.json()
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {response.status}")
                        try:
                            error_data = json.loads(response_text)
                            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                        except:
                            pass
                        return None
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return None